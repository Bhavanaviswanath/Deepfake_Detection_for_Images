# -*- coding: utf-8 -*-
"""final-ml (1).ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1Y66fEGCZ5ao6a91OMFzh6EITaJjpwBUu
"""

# This Python 3 environment comes with many helpful analytics libraries installed
# It is defined by the kaggle/python Docker image: https://github.com/kaggle/docker-python
# For example, here's several helpful packages to load

import numpy as np # linear algebra
import pandas as pd # data processing, CSV file I/O (e.g. pd.read_csv)

# Input data files are available in the read-only "../input/" directory
# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory

import os
for dirname, _, filenames in os.walk('/kaggle/input'):
    for filename in filenames:
        print(os.path.join(dirname, filename))

# You can write up to 20GB to the current directory (/kaggle/working/) that gets preserved as output when you create a version using "Save & Run All"
# You can also write temporary files to /kaggle/temp/, but they won't be saved outside of the current session

import tensorflow as tf
from tensorflow.keras import models, layers
import matplotlib.pyplot as plt

# Image_Size= 256
# Batch_Size = 32
# Channels=3

dataset = tf.keras.preprocessing.image_dataset_from_directory(
    "../input/real-and-fake-face-detection/real_and_fake_face/",
    shuffle=True,
    image_size = (256,256),
    batch_size=32

)

class_names = dataset.class_names
class_names

for image_batch, label_batch in dataset.take(1):
    print(image_batch.shape)
    print(label_batch.numpy())

for image_batch, label_batch in dataset.take(1):
    plt.imshow(image_batch[0].numpy().astype("uint8"))
    plt.title(class_names[label_batch[0]])

def splitting_dataset_tf(ds, train_split=0.8, val_split=0.1, test_split=0.1, shuffle=True, shuffle_size=10000):

    ds_size=len(ds)

    if shuffle:
        ds = ds.shuffle(shuffle_size, seed=12)

    train_size=int(train_split * ds_size)
    val_size= int(val_split * ds_size)

    train_ds= ds.take(train_size)

    val_ds = ds.skip(train_size).take(val_size)
    test_ds = ds.skip(train_size).skip(val_size)

    return train_ds, val_ds, test_ds

import tensorflow as tf
from tensorflow.keras import layers
from tensorflow.keras.models import Sequential
from tensorflow.keras.optimizers import Adam
from tensorflow.keras.preprocessing.image import img_to_array, load_img
import numpy as np
import os

# Define paths
train_real_dir = '/kaggle/input/real-and-fake-face-detection/real_and_fake_face/training_real'
train_fake_dir = '/kaggle/input/real-and-fake-face-detection/real_and_fake_face/tr'
batch_size = 32
image_size = 256

# Function to load and preprocess images
def load_and_preprocess_image(image_path, image_size):
    # Load image and resize
    image = load_img(image_path, target_size=(image_size, image_size))
    # Convert to numpy array
    image = img_to_array(image)
    # Rescale pixel values to [0, 1]
    image = image / 255.0
    return image

# Function to load and preprocess dataset
def load_and_preprocess_dataset(directory, image_size, batch_size, train_split=0.8, val_split=0.1, test_split=0.1, shuffle=True, shuffle_seed=42):
    images = []
    labels = []

    # Load real images
    real_images = os.listdir(os.path.join(directory, 'training_real'))
    for img_name in real_images:
        img_path = os.path.join(directory, 'training_real', img_name)
        image = load_and_preprocess_image(img_path, image_size)
        images.append(image)
        labels.append(1)  # Label 1 for real images

    # Load fake images
    fake_images = os.listdir(os.path.join(directory, 'training_fake'))
    for img_name in fake_images:
        img_path = os.path.join(directory, 'training_fake', img_name)
        image = load_and_preprocess_image(img_path, image_size)
        images.append(image)
        labels.append(0)  # Label 0 for fake images

    # Convert lists to numpy arrays
    images = np.array(images, dtype='float32')
    labels = np.array(labels, dtype='float32')

    # Shuffle dataset if specified
    if shuffle:
        np.random.seed(shuffle_seed)
        indices = np.random.permutation(len(images))
        images = images[indices]
        labels = labels[indices]

    # Split dataset into train, val, test
    split1 = int(len(images) * train_split)
    split2 = int(len(images) * (train_split + val_split))

    train_images, train_labels = images[:split1], labels[:split1]
    val_images, val_labels = images[split1:split2], labels[split1:split2]
    test_images, test_labels = images[split2:], labels[split2:]

    return train_images, train_labels, val_images, val_labels, test_images, test_labels

# Load and preprocess dataset
train_images, train_labels, val_images, val_labels, test_images, test_labels = load_and_preprocess_dataset(train_dir, image_size, batch_size)

# Define the CNN model
model = Sequential([
    layers.Conv2D(64, (3, 3), activation='relu', input_shape=(image_size, image_size, 3)),
    layers.BatchNormalization(),
    layers.MaxPooling2D((2, 2)),

    layers.Conv2D(128, (3, 3), activation='relu'),
    layers.BatchNormalization(),
    layers.MaxPooling2D((2, 2)),

    layers.Conv2D(256, (3, 3), activation='relu'),
    layers.BatchNormalization(),
    layers.MaxPooling2D((2, 2)),

    layers.Flatten(),
    layers.Dense(512, activation='relu', kernel_regularizer=tf.keras.regularizers.l2(0.001)),
    layers.Dropout(0.5),
    layers.Dense(1, activation='sigmoid')
])

# Compile the model
model.compile(optimizer=Adam(learning_rate=0.0005),
              loss='binary_crossentropy',
              metrics=['accuracy'])

# Train the model
history = model.fit(
    train_images, train_labels,
    validation_data=(val_images, val_labels),
    batch_size=batch_size,
    epochs=50,
    verbose=1
)

# Evaluate the model
test_loss, test_acc = model.evaluate(test_images, test_labels)
print(f'Test accuracy: {test_acc}')

train_ds, val_ds, test_ds=splitting_dataset_tf(dataset)

print(len(train_ds),len(val_ds),len(test_ds))

train_ds = train_ds.cache().shuffle(1000).prefetch(buffer_size=tf.data.AUTOTUNE)
val_ds = train_ds.cache().shuffle(1000).prefetch(buffer_size=tf.data.AUTOTUNE)
test_ds = train_ds.cache().shuffle(1000).prefetch(buffer_size=tf.data.AUTOTUNE)

resize_and_rescale = tf.keras.Sequential([
    layers.experimental.preprocessing.Resizing(Image_Size,Image_Size),
    layers.experimental.preprocessing.Rescaling(1.0/255)
])

data_aug = tf.keras.Sequential([
    layers.experimental.preprocessing.RandomFlip("horizontal_and_vertical"),
    layers.experimental.preprocessing.RandomRotation(0.2),

])

input_shape = (Batch_Size,Image_Size, Image_Size,Channels)
n_classes = 3

model = models.Sequential([
    resize_and_rescale,
    data_aug,
    layers.Conv2D(32, (3,3), activation='relu', input_shape = input_shape),
    layers.MaxPooling2D((2,2)),
    layers.Conv2D(64, kernel_size = (3,3), activation='relu'),
    layers.MaxPooling2D((2,2)),
    layers.Conv2D(64, kernel_size = (3,3), activation='relu'),
    layers.MaxPooling2D((2,2)),
    layers.Conv2D(64, (3,3), activation='relu'),
    layers.MaxPooling2D((2,2)),
    layers.Conv2D(64, (3,3), activation='relu'),
    layers.MaxPooling2D((2,2)),
    layers.Conv2D(64, (3,3), activation='relu'),
    layers.MaxPooling2D((2,2)),


    layers.Flatten(),
    layers.Dense(64, activation = 'relu'),
    layers.Dense(n_classes, activation= 'softmax'),

])

model.build(input_shape=input_shape)

model.compile(
    optimizer='adam',
    loss = tf.keras.losses.SparseCategoricalCrossentropy(from_logits=False),
    metrics=['accuracy']
)

history = model.fit(
    train_ds,
    epochs=295,
    batch_size=Batch_Size,
    verbose=1,
    validation_data=val_ds
)

history = model.fit(
    train_ds,
    epochs=10,
    batch_size=Batch_Size,
    verbose=1,
    validation_data=val_ds
)

history = model.fit(
    train_ds,
    epochs=300,
    batch_size=Batch_Size,
    verbose=1,
    validation_data=val_ds
)

import matplotlib.pyplot as plt
from sklearn.metrics import confusion_matrix, ConfusionMatrixDisplay

# Assuming 'history' is the result from the model.fit()

# Plot training & validation accuracy values
plt.figure(figsize=(12, 6))
plt.subplot(1, 2, 1)
plt.plot(history.history['accuracy'])
plt.plot(history.history['val_accuracy'])
plt.title('Model Accuracy')
plt.xlabel('Epoch')
plt.ylabel('Accuracy')
plt.legend(['Train', 'Validation'], loc='upper left')

# Plot training & validation loss values
plt.subplot(1, 2, 2)
plt.plot(history.history['loss'])
plt.plot(history.history['val_loss'])
plt.title('Model Loss')
plt.xlabel('Epoch')
plt.ylabel('Loss')
plt.legend(['Train', 'Validation'], loc='upper left')

plt.tight_layout()
plt.show()

import numpy as np
from sklearn.metrics import confusion_matrix, classification_report
import matplotlib.pyplot as plt
import seaborn as sns

# Generate predictions
y_pred_probs = model.predict(val_ds)
y_pred = np.argmax(y_pred_probs, axis=1)
y_true = np.concatenate([y for _, y in val_ds], axis=0)

# Confusion Matrix
conf_matrix = confusion_matrix(y_true, y_pred)

# Plot confusion matrix
plt.figure(figsize=(8, 6))
sns.heatmap(conf_matrix, annot=True, fmt="d", cmap="Blues", xticklabels=class_names, yticklabels=class_names)
plt.title('Confusion Matrix')
plt.xlabel('Predicted')
plt.ylabel('True')
plt.show()

# Classification Report
print("Classification Report:\n", classification_report(y_true, y_pred, target_names=class_names))

scores = model.evaluate(test_ds)

scores_train = model.evaluate(train_ds)
print(f"Training Accuracy: {scores_train[1]*100:.2f}%")

import numpy as np
import matplotlib.pyplot as plt

def print_prediction(image, expected_label, predicted_label):
    print("PREDICTION:")
    print("Expected Label:\033[1m{:<30}\033[0m ".format(expected_label))  # Bold expected label
    print("Predicted Label:\033[1m{:<30}\033[0m ".format(predicted_label))  # Bold predicted label

    plt.imshow(image)
    plt.show()

for image_batch, label_batch in dataset.take(1):
    first_image = image_batch[0].numpy().astype('uint8')
    first_label = label_batch[0].numpy()

    expected_label = class_names[first_label]
    batch_pred = model.predict(image_batch)
    predicted_label = class_names[np.argmax(batch_pred[0])]

    print_prediction(first_image, expected_label, predicted_label)

def pred(model, img):
    img_array = tf.keras.preprocessing.image.img_to_array(images[i].numpy())
    img_array = tf.expand_dims(img_array, 0)

    predictions = model.predict(img_array)

    predicted_class = class_names[np.argmax(predictions[0])]
    confidence = round(100 * (np.max(predictions[0])), 2)
    return predicted_class, confidence

plt.figure(figsize=(15, 15))

for images, labels in test_ds.take(1):
    for i in range(9):
        ax = plt.subplot(3,3, i+1)
        plt.imshow(images[i].numpy().astype("uint8"))

        predicted_class, confidence = pred(model, images[i].numpy())
        actual_class = class_names[labels[i]]

        plt.title(f"Actual : {actual_class},\n Predicted:{predicted_class}.\n Confidence:{confidence}%")

        plt.axis("off")

